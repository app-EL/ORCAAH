/*****************************ORCAA 2.1****************************************
* Script: Optical Reef and Coastal Area Assessment of Hawaii Tool (ORCAAH) 2.1*
* Forked from the NASA DEVELOP Optical Reef and Coastal Area Assessment Tool  *
* Authors v1.0: Alice Lin, Charlie Devine, Alana Higgins, Sophia Skoglund     *
* Authors v2.0: Vanessa Valenti, Hayley Pippin, Arbyn Olarte, Roxanna Pilot   *
* Authors v2.1: Erik Lash and Summer 2024 NASA DEVELOP PUP team.              *
* Date: August 26, 2024                                                       *
* Project: Hilo Bay Water Resources, Summer 2024                              *
* Contact: geographic.el@gmail.com                                       *
* Description: A Google Earth Engine Tool developed to monitor the spatial and*
* temporal variability of coastal water quality parameters in proximity to the*
* Hawaii Reef Systems. ORCAA performs the following                           *
* functions:                                                                  *
*    -Derives water quality parameters of turbidity, Normalized Difference    *
*     Chlorophyll Index, chlorophyll a, colored dissolved organic matter, and *
*     sea surface temperature.                                                *
*    -Visualizes water quality parameters in map layers in selectable areas of*
*     interest in Hawaii coast waters.                                        *
*    -Generates time series charts for each parameter and area of interest to *
*     show temporal variability in water quality.                             *
*    -User can export images in map layers as GeoTiff                         *
*    -User can upload own asset for analysis as well as draw own geometry     *
*    -Available in both English and Spanish                                   *
*    -Displays images in map layers in order of least cloudy image during     *
*     input time period                                                       *
*    -Tool automatically updates with latest satellite imagery as it is       *
*     processed by Google Earth Engine                                        *
*                                                                             *
*  Usage: Requires a Google Earth Engine account                              *
*                                                                             *
*  Parameters:                                                                *
*    -Turbidity, NDCI, Chlorophyll a, CDOM, SST                               *
*                                                                             *
* To Use:                                                                     *
*  - change the language the tool uses with the first selection menu to       *
*      preferred language                                                     *
*  - set time frame to desired time period for analysis (2017-01-01 to        *
*     to present)                                                             *
*  - To add own asset or draw geometry, follow instructions given in panel.   *
*  - Add images from the time range as a layer to the map. Check which        *
*      parameters to display. Press "Add Images to the Map". Reset map layers *
*      by clicking button "Reset Map"                                         *
*  - Export map image to Google Drive by selecting analysis type and then     *
*      clicking "Export Images(GeoTIFF).                                      *
*  - Generate a time series chart by selecting a parameter for analysis       *
*      then press "Generate Time Series Chart".                               *
*  - To download PNG, CSV, or SVG of time series chart image and data,        *
*      click the right corner arrow of the time series chart.                 *
*                                                                             *
*  No steps must be taken to modify the code to enable it to run.             *
*                                                                             *
* This software may be used, reproduced, and provided to others only as       *
* permitted under the terms of the agreement under which it was acquired from *
* the U.S. Government.  Neither title to, nor ownership of, the software is   *
* hereby transferred.  This notice shall remain on all copies of the software.*
*                                                                             *
* Copyright 2020 United States Government as represented by the Administrator *
* of the National Aeronautics and Space Administration. All Rights Reserved.  *
*******************************************************************************/

var hilo_cty = /* color: #d63000 */ee.Geometry.Point([-155.086823, 19.724112]),
    land_mask = ee.FeatureCollection("projects/bz-sdg/bz_extent");

var EEZ = ee.FeatureCollection("projects/bz-sdg/EEZ"); 
var MBR = ee.FeatureCollection("projects/bz-sdg/MBR");

//ALL GEOMETRIES
var hilo_bay_small = /* color: #98ff00 */ee.Feature(
        ee.Geometry.Polygon(
            [[[-155.06390348499994,19.764910302000033],
              [-155.08937429099993,19.7633277810001],
              [-155.09346946299991,19.75745429400007],
              [-155.09069944699996,19.726059158000169],
              [-155.08691049499998,19.720884054000066],
              [-155.07529904599991,19.712272506000033],
              [-155.06202863299995,19.723170503000176],
              [-155.0343790789999,19.736483517000181],
              [-155.06390348499994,19.764910302000033]]]),
        {
          "NAME": "Hilo Bay Small",
          "system:index": "0"
        }),
    hilo_bay_large = /* color: #98ff00 */ee.Feature(
        ee.Geometry.Polygon(
            [[[-155.09291662723689,19.771457170594829],
              [-155.09346946299991,19.75745429400007],
              [-155.09069944699996,19.726059158000169],
              [-155.08691049475735,19.72088405442355],
              [-155.07529904599991,19.712272506000033],
              [-155.06202863304171,19.723170503171787],
              [-155.04806455141212,19.730033396532576],
              [-155.03188133215829,19.733073540962266],
              [-155.02189378647651,19.731285512104307],
              [-155.00751810644408,19.733599365977625],
              [-154.99647578112038,19.721855940633304],
              [-154.99267755624797,19.714061666676571],
              [-154.94778446775911,19.735505117973844],
              [-155.04055349078089,19.869878940390322],
              [-155.08334231854889,19.847095746424202],
              [-155.08546037726893,19.843522174019995],
              [-155.0864654742584,19.830814876367469],
              [-155.09445941147538,19.811017073529285],
              [-155.09265428877552,19.801041258685586],
              [-155.09291662723689,19.771457170594829]]]),
        {
          "NAME": "Hilo Bay Large",
          "system:index": "0"
        }),
      hilo_bay_xlarge = /* color: #98ff00 */ee.Feature(
        ee.Geometry.Polygon(
            [[[-155.09291662723689,19.771457170594829],
              [-155.09346946299991,19.75745429400007],
              [-155.09069944699996,19.726059158000169],
              [-155.08691049475735,19.72088405442355],
              [-155.07529904599991,19.712272506000033],
              [-155.06202863304171,19.723170503171787],
              [-155.04806455141212,19.730033396532576],
              [-155.03188133215829,19.733073540962266],
              [-155.02189378647651,19.731285512104307],
              [-155.00751810644408,19.733599365977625],
              [-154.99647578112038,19.721855940633304],
              [-154.99267755624797,19.714061666676571],
              [-154.98101803193705,19.685702389817777],
              [-154.98528271929294,19.672698312692432],
              [-154.98651665532913,19.641457295776604],
              [-154.97600337381587,19.627706197092891],
              [-154.88105918005357,19.682867436426477],
              [-155.06315395308152,19.959906403216451],
              [-155.1405977874746,19.914263310861543],
              [-155.12968478502577,19.898620783315209],
              [-155.12090350726831,19.882579614844872],
              [-155.10605603890588,19.868845726941629],
              [-155.09364473846935,19.85986397417912],
              [-155.08711458601874,19.850356157030774],
              [-155.08546037726893,19.843522174019995],
              [-155.0864654742584,19.830814876367469],
              [-155.09445941147538,19.811017073529285],
              [-155.09265428877552,19.801041258685586],
              [-155.09291662723689,19.771457170594829]]]),
        {
          "NAME": "Hilo Bay Extra Large",
          "system:index": "0"
        });

//Hawaii MPAS
var MPAs = ee.FeatureCollection([
hilo_bay_small,
hilo_bay_large,
hilo_bay_xlarge
]);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////// STABLE INPUTS /////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//// palettes //// 
var paletteNDVI = ['FFDEAD', '006400'];
var paletteNDWI = ['FFE333' ,'3368FF'];
var paletteLC = [
  'D2B48C', // barren
  '288C35', // vegetation
  '2768D1', // water
  'FE9DFF', // salt flats
  'F6F6F6' // snow
  ];

//// visParams  ////
var trueColor = {bands: ['red', 'green', 'blue'], min: 0, max: 3000, gamma: 1.4};
var NDVIvisParams = {bands: "NDVI", min: 0, max: 1, palette: paletteNDVI};
var NDWIvisParams = {bands: "NDWI", min: -1, max: 0.5, palette: paletteNDWI};
var LCvisParams = {bands: "LandClassification", min: 1, max: 5, palette: paletteLC};
var RGB567 = {bands: ['nir', 'swir1', 'swir2'], min: 0, max: 3000};
var RGB521 = {bands: ['nir', 'blue', 'ultra blue'], min: 0, max: 3000};
var RGB531 = {bands: ['nir', 'green', 'ultra blue'], min: 0, max: 3000};

//Masking Functions for Time Series Charts//
//Turbidity
var turb_totalMask = function(collection) {
  var mask_turb = function(image) {
    var turb_band = image.select('s2_turb');
    var mask = turb_band.gte(0.0).and(turb_band.lte(40))
    var masked_band = image.updateMask(mask);
    return masked_band;
  };
  var masked_turb = collection.map(mask_turb);
    function threshold(image) {
      return image.set('s2_turb', image.get('s2_turb'));}
  var final_turbColl = masked_turb.map(threshold);
  return final_turbColl;
}

//NDCI
var ndci_totalMask = function(collection) {
  var mask_ndci = function(image) {
    var ndci_band = image.select('NDCI');
    var mask = ndci_band.lte(1).and(ndci_band.gte(-1.0));
    var masked_band = image.updateMask(mask);
  return masked_band;
  };
  var masked_ndci = collection.map(mask_ndci);
  function threshold(image) {
    return image.set('NDCI', image.get('NDCI'));}
  var final_ndciColl = masked_ndci.map(threshold);
  return final_ndciColl;
};

//CHL
var chl_totalMask = function(collection) {
  var mask_chl = function (image) {
    var chl_band = image.select('s2_chl');
    var mask = chl_band.lte(25);
    var masked_band = image.updateMask(mask);
  return masked_band;
  };
  var masked_chl = collection.map(mask_chl);
  function threshold(image) {
    return image.set('s2_chl', image.get('s2_chl'));}
  var final_chlColl = masked_chl.map(threshold);
  return final_chlColl;
}
    
//CDOM
var cdom_totalMask = function(collection) {
  var mask_cdom = function(image) {
    var cdom_band = image.select('s2_cdom');
    var mask = cdom_band.lte(10);
    var masked_band = image.updateMask(mask);
    return masked_band;
  };
  var masked_cdom = collection.map(mask_cdom);
  function threshold(image) {
    return image.set('s2_cdom', image.get('s2_cdom'));}
  
  var final_cdomColl = masked_cdom.map(threshold);
 return final_cdomColl;
};

////////////Visual Parameters//////////////
// Landsat 8 Surface Reflectance
var sr_viz = {
  bands: ['B4','B3','B2'],
  min:0, 
  max:4000, 
  gamma: 3.5, 
};
// Sentinel-2 Surface Reflectance 
var s2_viz = {
  bands: ['B4', 'B3', 'B2'],
  min: 0.0,
  max: 0.03,
  gamma: 0.80
};
// Turbidity
var turb_viz = {
  min:0,
  max:5,
  palette: ['332288', '88CCEE', '44AA99', '999933', 'DDCC77', 'CC6677', '882255', 'AA4499']
};
// NDCI
var ndci_viz = {
  bands: "NDCI",
  min:-1,
  max:1,
  palette: ['0000FF','3333FF','6666FF','9999FF','99FFCC','66FFB2','33FF99','00FF80']
};
// Chlorophyll-a
var mishra_viz = {
  bands: "s2_chl",
  min: 0,
  max: 5,
  palette: ['2372EF','23EF30']
};
// CDOM 
var cdom_viz = {
  bands: "s2_cdom",
  min:0,
  max:6,
  palette: ['#3949AB', '#138D75', '#17A589', '#F4D03F', '#D35400', '#D35400']
};
// SST
var sst_viz = {
  bands: 'sst',
  min:23,
  max:33,
  palette: ['#0022c9','#194bff','#EDF6FF', '#b20000', '#f00a0a']
};

// Options for selecting an area of interest
var all_roi = ['Hilo Bay Small',  // Hawaii ROIs start here
                'Hilo Bay Large',
                'Hilo Bay Extra Large'
];

//Set Map default as satellite view
Map.setOptions('HYBRID');
// Add first layer of protected area polygons for ROI selection
// Create an empty image into which to paint the features, cast to byte.
var empty = ee.Image().byte();

// Paint the roi outlines with different colors, then display.
var outlines = empty.paint({
  featureCollection: MPAs,
  color: 'ShapeID',
  width: 2
});

Map.addLayer(outlines, {palette: 'yellow'}, 'Hawaii MPAs', true, 0.8);

//Center Map to Hilo City 
Map.centerObject(hilo_cty,8);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////// Functions For Analysis ////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var roi_selection = function(roi) {
  var input; //empty variable to be given an ROI
  var poly_filt;
  var poly_geom;
  // creates a variable that is a string of the first few characters in the textbox
  var roi_start = roi.slice(0,5);
  // if else statement that assigns ROI based on roi_start
  if (roi_start == 'users'){
    // if the text input starts with 'users', it's a path to user asset. convert input to string
    var roi_name = ee.String(roi);
    // create feature from path
    var user_feature = ee.FeatureCollection(roi_name);
    // convert to a geometry, needed for clipping and time series inputs
    var user_feat_geom = user_feature.geometry();
    input = ee.Geometry(user_feat_geom);
  }
  else {
      poly_filt = MPAs.filterMetadata("NAME", "equals", roi)
      poly_geom = poly_filt.geometry();
      input = ee.Geometry(poly_geom);
  }
  return input;
};

// Function to set the area of interest based on the general region selected
function setAreaOfInterest(gen_select){
    var areaInput;
    if (gen_select == 'Hawaii'){
      areaInput = roi_selection(hawaiiROI_select.getValue());
    } //sets the area of interest to the large study region
    else if (gen_select == 'Upload your own asset'){
      var userInput = assetInputtxt.getValue();
      if (userInput) userInput = ee.String(userInput);
      var userSupplied = ee.FeatureCollection(userInput);
      var userGeom = userSupplied.geometry();
      areaInput = ee.Geometry(userGeom);
    } //sets the area of interest to an asset input by the user 
    else if (gen_select == 'Draw your own asset'){
      areaInput = ee.Geometry(geometry);
    } //sets the area of interest to an asset draw by the user
    //use the following code template if adding your own geometry:
    //else if (aoi == VARIABLE_NAME){ // VARIABLE_NAME must be added to the 
    //    areaInput = ee.FeatureCollection(GEOMETRY_IMPORT_NAME);
    //}
    return areaInput;
}

// Function to set the area of interest based on the general region selected
function getName(gen_select){
    var areaname;
    if (gen_select == 'Hawaii'){
      areaname = hawaiiROI_select.getValue();
    } //sets the area of interest to the large study region
    else {
      areaname = 'User Asset';
    } 
    return areaname;
}

function createAnalysisIC(startDayInput, endDayInput, userselectarea){ //the function requires a start year (string), end year (string), and area (for clipping) inputs
    
    // Set area of interest. Runs the setAreaOfInterest function, using userselectarea as the input
    var areaInput = setAreaOfInterest(userselectarea);
    
    // var areaInput = setAreaOfInterest(userselectarea); // ++++++++++++++++++++ MIGHT HAVE TO CHANGE TO IF-THEN AREA_INPUT FUNCTION 
    
    // Set the start and end dates of the collection from the user defined dates specified in the panel
    var start = startDayInput;
    var end = endDayInput;
    
    // Defining function to create image collection for time specified for the different sensor collections // 
    function filterbyDateArea (start, end, areaInput){       
      var landsat8 = ee.ImageCollection("LANDSAT/LC08/C02/T2"); //0
      var sentinel2_L1 = ee.ImageCollection('COPERNICUS/S2'); //1
      var modis = ee.ImageCollection('NASA/OCEANDATA/MODIS-Terra/L3SMI') //2
            .merge(ee.ImageCollection('NASA/OCEANDATA/MODIS-Aqua/L3SMI')); //3
      var cdr = ee.ImageCollection('NOAA/PERSIANN-CDR'); //4
      
      var L8bandNames = ee.Image(landsat8.first()).bandNames();
      var S2bandNames = ee.Image(sentinel2_L1.first()).bandNames();
      var modisbandNames = ee.Image(modis.first()).bandNames();
      
      //Landsat 8 Cloud Mask
      // Developed by Rodrigo E. Principe
      //https://github.com/fitoprincipe
      var mask = require('users/fitoprincipe/geetools:cloud_masks');
      var mask_function = mask.landsatSR();
      
      
      //Filtered datasets
      var filteredL8 = ee.ImageCollection(landsat8) 
        .filterBounds(areaInput)
        .filterDate(start, end)
        .map(mask_function);
      var filteredS2L1 = ee.ImageCollection(sentinel2_L1)
        .filterBounds(areaInput)
        .filterDate(start, end);
      var filteredMODIS = ee.ImageCollection(modis)
        .filterBounds(areaInput)
        .filterDate(start, end);
      var filteredCDR = ee.ImageCollection(cdr)
        .filterBounds(areaInput)
        .filterDate(start, end)
        .select('precipitation');
      
      // Atmospherically correct Sentinel-2 Level 1-C imagery with MAIN algorithm 
      // Defined in Page, et. al. (2019) +++++++++++++++++++++++++++++++++++++++++++++++++++ Fuller citation
      // Map MAIN on dataset
      var S2_Rrs = filteredS2L1.map(MAIN);
      // MAIN function
      function MAIN(img){
        var _0x9159=['tan','acos','B11','log','slice','normalizedDifference','B8A','updateMask','Image','B12','select','geometry','USGS/SRTMGL1_003','clip','Date','get','fromYMD','difference','day','int','add','subtract','cos','pow','multiply','divide','constant','MEAN_SOLAR_AZIMUTH_ANGLE','MEAN_SOLAR_ZENITH_ANGLE','sin','MEAN_INCIDENCE_ZENITH_ANGLE_B5','Array','SOLAR_IRRADIANCE_B2','SOLAR_IRRADIANCE_B3','SOLAR_IRRADIANCE_B4','SOLAR_IRRADIANCE_B5','SOLAR_IRRADIANCE_B6','SOLAR_IRRADIANCE_B7','SOLAR_IRRADIANCE_B8','SOLAR_IRRADIANCE_B11','toArray','arrayProject','arrayFlatten','addBands','exp','asin'];(function(_0x313dc6,_0x3aaea8){var _0x214232=function(_0x17272b){while(--_0x17272b){_0x313dc6['push'](_0x313dc6['shift']());}};_0x214232(++_0x3aaea8);}(_0x9159,0x1a6));var _0x4e93=function(_0x47914c,_0x2f8251){_0x47914c=_0x47914c-0x0;var _0x446de0=_0x9159[_0x47914c];return _0x446de0;};var pi=ee[_0x4e93('0x0')](3.141592);var bands=['B1','B2','B3','B4','B5','B6','B7','B8','B8A','B11',_0x4e93('0x1')];var rescale=img[_0x4e93('0x2')](bands)['divide'](0x2710);var footprint=rescale[_0x4e93('0x3')]();var DEM=ee[_0x4e93('0x0')](_0x4e93('0x4'))[_0x4e93('0x5')](footprint);var DU=ee[_0x4e93('0x0')](0x12c);var imgDate=ee[_0x4e93('0x6')](img[_0x4e93('0x7')]('system:time_start'));var FOY=ee[_0x4e93('0x6')][_0x4e93('0x8')](imgDate[_0x4e93('0x7')]('year'),0x1,0x1);var JD=imgDate[_0x4e93('0x9')](FOY,_0x4e93('0xa'))[_0x4e93('0xb')]()[_0x4e93('0xc')](0x1);var myCos=ee['Image'](0.0172)['multiply'](ee[_0x4e93('0x0')](JD)[_0x4e93('0xd')](ee[_0x4e93('0x0')](0x2)))[_0x4e93('0xe')]()[_0x4e93('0xf')](0x2);var cosd=myCos[_0x4e93('0x10')](pi[_0x4e93('0x11')](ee[_0x4e93('0x0')](0xb4)))['cos']();var d=ee[_0x4e93('0x0')](0x1)['subtract'](ee[_0x4e93('0x0')](0.01673))[_0x4e93('0x10')](cosd)[_0x4e93('0x5')](footprint);var SunAz=ee['Image'][_0x4e93('0x12')](img[_0x4e93('0x7')](_0x4e93('0x13')))[_0x4e93('0x5')](footprint);var SunZe=ee[_0x4e93('0x0')][_0x4e93('0x12')](img['get'](_0x4e93('0x14')))[_0x4e93('0x5')](footprint);var cosdSunZe=SunZe[_0x4e93('0x10')](pi[_0x4e93('0x11')](ee['Image'](0xb4)))[_0x4e93('0xe')]();var sindSunZe=SunZe[_0x4e93('0x10')](pi[_0x4e93('0x11')](ee[_0x4e93('0x0')](0xb4)))[_0x4e93('0x15')]();var SatZe=ee[_0x4e93('0x0')][_0x4e93('0x12')](img[_0x4e93('0x7')](_0x4e93('0x16')))[_0x4e93('0x5')](footprint);var cosdSatZe=SatZe[_0x4e93('0x10')](pi[_0x4e93('0x11')](ee['Image'](0xb4)))[_0x4e93('0xe')]();var sindSatZe=SatZe['multiply'](pi['divide'](ee[_0x4e93('0x0')](0xb4)))['sin']();var SatAz=ee[_0x4e93('0x0')][_0x4e93('0x12')](img[_0x4e93('0x7')]('MEAN_INCIDENCE_AZIMUTH_ANGLE_B5'))[_0x4e93('0x5')](footprint);var RelAz=SatAz[_0x4e93('0xd')](SunAz);var cosdRelAz=RelAz[_0x4e93('0x10')](pi[_0x4e93('0x11')](ee[_0x4e93('0x0')](0xb4)))[_0x4e93('0xe')]();var P=ee[_0x4e93('0x0')](0x18bcd)['multiply'](ee[_0x4e93('0x0')](0x1)[_0x4e93('0xd')](ee['Image'](0.0000225577)[_0x4e93('0x10')](DEM))[_0x4e93('0xf')](5.25588))[_0x4e93('0x10')](0.01);var Po=ee[_0x4e93('0x0')](1013.25);var ESUN=ee['Image'](ee[_0x4e93('0x17')]([ee[_0x4e93('0x0')](img[_0x4e93('0x7')]('SOLAR_IRRADIANCE_B1')),ee['Image'](img[_0x4e93('0x7')](_0x4e93('0x18'))),ee['Image'](img['get'](_0x4e93('0x19'))),ee[_0x4e93('0x0')](img[_0x4e93('0x7')](_0x4e93('0x1a'))),ee['Image'](img[_0x4e93('0x7')](_0x4e93('0x1b'))),ee[_0x4e93('0x0')](img[_0x4e93('0x7')](_0x4e93('0x1c'))),ee[_0x4e93('0x0')](img[_0x4e93('0x7')](_0x4e93('0x1d'))),ee[_0x4e93('0x0')](img[_0x4e93('0x7')](_0x4e93('0x1e'))),ee[_0x4e93('0x0')](img['get']('SOLAR_IRRADIANCE_B8A')),ee[_0x4e93('0x0')](img[_0x4e93('0x7')](_0x4e93('0x1f'))),ee[_0x4e93('0x0')](img[_0x4e93('0x7')](_0x4e93('0x18')))]))['toArray']()[_0x4e93('0x20')](0x1);ESUN=ESUN[_0x4e93('0x10')](ee[_0x4e93('0x0')](0x1));var ESUNImg=ESUN[_0x4e93('0x21')]([0x0])[_0x4e93('0x22')]([bands]);var imgArr=rescale[_0x4e93('0x2')](bands)[_0x4e93('0x20')]()['toArray'](0x1);var Ltoa=imgArr[_0x4e93('0x10')](ESUN)[_0x4e93('0x10')](cosdSunZe)[_0x4e93('0x11')](pi[_0x4e93('0x10')](d[_0x4e93('0xf')](0x2)));var bandCenter=ee[_0x4e93('0x0')](0x1bb)[_0x4e93('0x11')](0x3e8)['addBands'](ee[_0x4e93('0x0')](0x1ea)[_0x4e93('0x11')](0x3e8))[_0x4e93('0x23')](ee[_0x4e93('0x0')](0x230)['divide'](0x3e8))[_0x4e93('0x23')](ee['Image'](0x299)[_0x4e93('0x11')](0x3e8))[_0x4e93('0x23')](ee[_0x4e93('0x0')](0x2c1)[_0x4e93('0x11')](0x3e8))[_0x4e93('0x23')](ee[_0x4e93('0x0')](0x2e4)[_0x4e93('0x11')](0x3e8))[_0x4e93('0x23')](ee[_0x4e93('0x0')](0x30f)[_0x4e93('0x11')](0x3e8))[_0x4e93('0x23')](ee[_0x4e93('0x0')](0x34a)[_0x4e93('0x11')](0x3e8))['addBands'](ee['Image'](0x361)['divide'](0x3e8))['addBands'](ee[_0x4e93('0x0')](0x64a)[_0x4e93('0x11')](0x3e8))[_0x4e93('0x23')](ee['Image'](0x88e)[_0x4e93('0x11')](0x3e8))[_0x4e93('0x20')]()[_0x4e93('0x20')](0x1);var koz=ee[_0x4e93('0x0')](0.0039)[_0x4e93('0x23')](ee[_0x4e93('0x0')](0.0213))[_0x4e93('0x23')](ee[_0x4e93('0x0')](0.1052))[_0x4e93('0x23')](ee[_0x4e93('0x0')](0.0505))[_0x4e93('0x23')](ee[_0x4e93('0x0')](0.0205))[_0x4e93('0x23')](ee['Image'](0.0112))[_0x4e93('0x23')](ee[_0x4e93('0x0')](0.0075))['addBands'](ee[_0x4e93('0x0')](0.0021))[_0x4e93('0x23')](ee[_0x4e93('0x0')](0.0019))[_0x4e93('0x23')](ee[_0x4e93('0x0')](0x0))[_0x4e93('0x23')](ee[_0x4e93('0x0')](0x0))[_0x4e93('0x20')]()[_0x4e93('0x20')](0x1);var Toz=koz[_0x4e93('0x10')](DU)[_0x4e93('0x11')](ee[_0x4e93('0x0')](0x3e8));var Lt=Ltoa[_0x4e93('0x10')](Toz[_0x4e93('0x10')](ee[_0x4e93('0x0')](0x1)[_0x4e93('0x11')](cosdSunZe)[_0x4e93('0xc')](ee[_0x4e93('0x0')](0x1)[_0x4e93('0x11')](cosdSatZe)))[_0x4e93('0x24')]());var Tr=P[_0x4e93('0x11')](Po)[_0x4e93('0x10')](ee[_0x4e93('0x0')](0.008569)[_0x4e93('0x10')](bandCenter[_0x4e93('0xf')](-0x4)))[_0x4e93('0x10')](ee[_0x4e93('0x0')](0x1)['add'](ee[_0x4e93('0x0')](0.0113)[_0x4e93('0x10')](bandCenter['pow'](-0x2)))[_0x4e93('0xc')](ee['Image'](0.00013)[_0x4e93('0x10')](bandCenter[_0x4e93('0xf')](-0x4))));var theta_V=ee[_0x4e93('0x0')](1e-10);var sin_theta_j=sindSunZe[_0x4e93('0x11')](ee['Image'](1.333));var theta_j=sin_theta_j[_0x4e93('0x25')]()[_0x4e93('0x10')](ee['Image'](0xb4)['divide'](pi));var theta_SZ=SunZe;var R_theta_SZ_s=theta_SZ[_0x4e93('0x10')](pi[_0x4e93('0x11')](ee['Image'](0xb4)))[_0x4e93('0xd')](theta_j['multiply'](pi['divide'](ee['Image'](0xb4))))[_0x4e93('0x15')]()['pow'](0x2)[_0x4e93('0x11')](theta_SZ[_0x4e93('0x10')](pi['divide'](ee[_0x4e93('0x0')](0xb4)))[_0x4e93('0xc')](theta_j[_0x4e93('0x10')](pi[_0x4e93('0x11')](ee['Image'](0xb4))))['sin']()[_0x4e93('0xf')](0x2));var R_theta_V_s=ee[_0x4e93('0x0')](1e-10);var R_theta_SZ_p=theta_SZ[_0x4e93('0x10')](pi[_0x4e93('0x11')](0xb4))[_0x4e93('0xd')](theta_j[_0x4e93('0x10')](pi[_0x4e93('0x11')](0xb4)))[_0x4e93('0x26')]()[_0x4e93('0xf')](0x2)['divide'](theta_SZ[_0x4e93('0x10')](pi['divide'](0xb4))[_0x4e93('0xc')](theta_j[_0x4e93('0x10')](pi[_0x4e93('0x11')](0xb4)))[_0x4e93('0x26')]()[_0x4e93('0xf')](0x2));var R_theta_V_p=ee['Image'](1e-10);var R_theta_SZ=ee[_0x4e93('0x0')](0.5)[_0x4e93('0x10')](R_theta_SZ_s[_0x4e93('0xc')](R_theta_SZ_p));var R_theta_V=ee[_0x4e93('0x0')](0.5)[_0x4e93('0x10')](R_theta_V_s['add'](R_theta_V_p));var theta_neg=cosdSunZe[_0x4e93('0x10')](ee[_0x4e93('0x0')](-0x1))[_0x4e93('0x10')](cosdSatZe)['subtract'](sindSunZe[_0x4e93('0x10')](sindSatZe)[_0x4e93('0x10')](cosdRelAz));var theta_neg_inv=theta_neg[_0x4e93('0x27')]()[_0x4e93('0x10')](ee[_0x4e93('0x0')](0xb4)['divide'](pi));var theta_pos=cosdSunZe[_0x4e93('0x10')](cosdSatZe)[_0x4e93('0xd')](sindSunZe['multiply'](sindSatZe)[_0x4e93('0x10')](cosdRelAz));var theta_pos_inv=theta_pos['acos']()[_0x4e93('0x10')](ee['Image'](0xb4)['divide'](pi));var cosd_tni=theta_neg_inv[_0x4e93('0x10')](pi[_0x4e93('0x11')](0xb4))['cos']();var cosd_tpi=theta_pos_inv[_0x4e93('0x10')](pi[_0x4e93('0x11')](0xb4))[_0x4e93('0xe')]();var Pr_neg=ee[_0x4e93('0x0')](0.75)['multiply'](ee[_0x4e93('0x0')](0x1)[_0x4e93('0xc')](cosd_tni[_0x4e93('0xf')](0x2)));var Pr_pos=ee[_0x4e93('0x0')](0.75)[_0x4e93('0x10')](ee[_0x4e93('0x0')](0x1)['add'](cosd_tpi[_0x4e93('0xf')](0x2)));var Pr=Pr_neg['add'](R_theta_SZ[_0x4e93('0xc')](R_theta_V)[_0x4e93('0x10')](Pr_pos));var denom=ee['Image'](0x4)[_0x4e93('0x10')](pi)[_0x4e93('0x10')](cosdSatZe);var Lr=ESUN[_0x4e93('0x10')](Tr)[_0x4e93('0x10')](Pr[_0x4e93('0x11')](denom));var Lrc=Lt[_0x4e93('0xd')](Lr);var LrcImg=Lrc['arrayProject']([0x0])[_0x4e93('0x22')]([bands]);var prcImg=Lrc[_0x4e93('0x10')](pi)[_0x4e93('0x10')](d[_0x4e93('0xf')](0x2))[_0x4e93('0x11')](ESUN[_0x4e93('0x10')](cosdSunZe));var bands_nm=ee[_0x4e93('0x0')](0x1bb)[_0x4e93('0x23')](ee['Image'](0x1ea))[_0x4e93('0x23')](ee[_0x4e93('0x0')](0x230))[_0x4e93('0x23')](ee[_0x4e93('0x0')](0x299))[_0x4e93('0x23')](ee[_0x4e93('0x0')](0x2c1))[_0x4e93('0x23')](ee['Image'](0x2e4))[_0x4e93('0x23')](ee['Image'](0x30f))[_0x4e93('0x23')](ee['Image'](0x34a))['addBands'](ee[_0x4e93('0x0')](0x361))[_0x4e93('0x23')](ee['Image'](0x0))[_0x4e93('0x23')](ee[_0x4e93('0x0')](0x0))[_0x4e93('0x20')]()[_0x4e93('0x20')](0x1);var Lam_10=LrcImg[_0x4e93('0x2')](_0x4e93('0x28'));var Lam_11=LrcImg['select'](_0x4e93('0x1'));var eps=Lam_11[_0x4e93('0x11')](ESUNImg['select'](_0x4e93('0x1')))['log']()[_0x4e93('0xd')](Lam_10[_0x4e93('0x11')](ESUNImg['select'](_0x4e93('0x28')))[_0x4e93('0x29')]())[_0x4e93('0x11')](ee[_0x4e93('0x0')](0x88e)[_0x4e93('0xd')](ee[_0x4e93('0x0')](0x64a)));var Lam=Lam_11[_0x4e93('0x10')](ESUN[_0x4e93('0x11')](ESUNImg['select'](_0x4e93('0x1'))))[_0x4e93('0x10')](eps['multiply'](ee[_0x4e93('0x0')](-0x1))[_0x4e93('0x10')](bands_nm[_0x4e93('0x11')](ee[_0x4e93('0x0')](0x88e)))[_0x4e93('0x24')]());var trans=Tr['multiply'](ee[_0x4e93('0x0')](-0x1))[_0x4e93('0x11')](ee[_0x4e93('0x0')](0x2))['multiply'](ee[_0x4e93('0x0')](0x1)[_0x4e93('0x11')](cosdSatZe))['exp']();var Lw=Lrc[_0x4e93('0xd')](Lam)[_0x4e93('0x11')](trans);var pw=Lw[_0x4e93('0x10')](pi)[_0x4e93('0x10')](d[_0x4e93('0xf')](0x2))[_0x4e93('0x11')](ESUN[_0x4e93('0x10')](cosdSunZe));var S2_Rrs=pw[_0x4e93('0x11')](pi)[_0x4e93('0x21')]([0x0])['arrayFlatten']([bands])[_0x4e93('0x2a')](0x0,0x9);var ndvi=img[_0x4e93('0x2b')]([_0x4e93('0x2c'),'B4']);S2_Rrs=S2_Rrs[_0x4e93('0x2d')](S2_Rrs[_0x4e93('0x2')]('B1')['gt'](0x0));S2_Rrs=S2_Rrs[_0x4e93('0x2d')](ndvi['lt'](0x0));
        var b11 = img.select('B11');
        return (S2_Rrs
                  .set('system:time_start',img.get('system:time_start')).set('CLOUDY_PIXEL_PERCENTAGE', img.get('CLOUDY_PIXEL_PERCENTAGE')));
      }
      
      // Define function to mosaic images by date. Necessary for collections with dates that may have multiple tiles present.
      function mosaicDates(images) {
        var reducer = ee.Reducer.mean();
        images = images.map(function(i) {
          return i.set({date:i.date().format('YYYY-MM-dd')}); //set date for all images
        });
        var time = 'date';
        // make list of distinct dates to use in join
        var distinct = images.distinct([time]); 
        // define filter to match images w/ same dates
        var filter = ee.Filter.equals({leftField: time, rightField: time}); 
        // preserve all matches generated from join
        var join = ee.Join.saveAll('matches'); 
        //apply join, creates collection w/ a 'matches' property
        var results = join.apply(distinct, images, filter); 
        //need band names variable to rename bands b/c creating new collection removes names
        var bandNames = ee.Image(images.first()).bandNames(); 
        results = results.map(function(i) {
          //create new image collection for each group of matches
          var mosaic = ee.ImageCollection.fromImages(i.get('matches')) 
                        //sort, reduce collection to single image, rename bands
                        .sort('system:index').reduce(reducer).rename(bandNames); 
          //produces a single image from each group of matches with date reassigned
          return mosaic.copyProperties(i).set(time, i.get(time)) 
            .set('system:time_start', ee.Date(i.get(time)).millis());
        });
        //create a new image collection from all the new daily mosaics
        return ee.ImageCollection(results); 
      }
    //Run mosaicDates function on filtered datasets to mosaic
      var mosaickedL8 = mosaicDates(filteredL8);
      var mosaickedS2L1 = mosaicDates(S2_Rrs);
      var mosaickedMODIS = mosaicDates(filteredMODIS);
    
    return [mosaickedL8, mosaickedS2L1, filteredMODIS, filteredCDR];
    }
    
    // Run the function that creates the filtered image collection for each of the sensors.
    var filteredCollections = filterbyDateArea(start, end, areaInput);
    
    // Define the individual filtered sensor collections by accessing their index in 'filteredCollections'
    var L8_filtColl = filteredCollections[0];
    var S2L1_filtColl = filteredCollections[1];
    var modis_filtColl = filteredCollections[2];
    var cdr_filtColl = filteredCollections[3];
    
    
    // Functions to map onto the image collection ================================
    // Turbidity Algorithms
    // Adapted from Kim, Avila, and Wang from UC Berkeley
    // Run on Landsat 8 imagery and Sentinel-2 imagery
    var l8_turbidity_alg = function(image) {
          var turbidity = image.expression(
              '(A_t * (p_w * scale_factor) / (1 - ((p_w * scale_factor )/ C)))', {
                  'p_w': image.select('B4'), //red band mid wv_len = 645.5nm
                  'A_t': 378.46, //calib param (ACOLITE)
                  'B_t': 0.33, //calib param (ACOLITE)
                  'C': 0.19905, //calib param (ACOLITE)
                  'pi': Math.PI,
                  'scale_factor': 0.0001 //band info
              }).rename('l8_turb');
                    var swir = image.select('B6');
          var turb_mask = turbidity.updateMask(swir.lte(215)).updateMask(turbidity.gte(0));
          return image.addBands(turb_mask);
    };
    
    var s2_turbidity_alg = function(image) {
          var turbidity = image.expression(
              '(A_t * (p_w * scale_factor) / (1 - ((p_w * scale_factor )/ C)))', {
                  'p_w': image.select('B4'), //red band mid wv_len = 645.5nm
                  'A_t': 366.14, //calib param (ACOLITE)
                  'B_t': 0.33, //calib param (ACOLITE)
                  'C': 0.19563, //calib param (ACOLITE)
                  'pi': Math.PI,
                  'scale_factor': 1.0 //band info
              }).rename('s2_turb');
          return(turbidity.rename('s2_turb').set('system:time_start', image.get('system:time_start'))
                      .set('CLOUDY_PIXEL_PERCENTAGE', image.get('CLOUDY_PIXEL_PERCENTAGE')));
    };
          
    // Chlorophyll-a Algorithm
    // Run on Sentinel-2 imagery
    // First, define a function to obtain the Normalized Difference Chlorophyll Index (NDCI) from an image
    var ndci_algorithm = function(image){
          var ndci = image.expression(
            '((B5*sf) - (B4*sf))/((B5*sf) + (B4*sf))', {
              'B4': image.select('B4'),
              'B5': image.select('B5'),
              'sf': 0.0001
            }).rename('NDCI');
          return(ndci.rename('NDCI').set('system:time_start', image.get('system:time_start'))
                      .set('CLOUDY_PIXEL_PERCENTAGE', image.get('CLOUDY_PIXEL_PERCENTAGE')));
    };
    // Derive the chlorophyll-a concentration using NDCI, adapted from Mishra & Mishra ++++++++++++++++ check on citations
    var mishra_algorithm = function(image){
          var mishra = image.expression(
            'a0 + (a1 * ndci) + (a2 * ndci_sqrd)', {
              'a0': 14.039,
              'a1': 86.115,
              'a2': 194.325,
              'ndci': ndci_algorithm(image).select('NDCI'),
              'ndci_sqrd': ndci_algorithm(image).select('NDCI').pow(2),
            }).rename('s2_chl');
          return(mishra.rename('s2_chl').set('system:time_start', image.get('system:time_start'))
                      .set('CLOUDY_PIXEL_PERCENTAGE', image.get('CLOUDY_PIXEL_PERCENTAGE')));
    };
    
    // Colored Dissolved Organic Matter (CDOM) Algorithm
    // Adapted from Chen, et. al. (2017)
    // Run on Sentinel-2 imagery
    var cdom_algorithm = function(image) {
          var cdom = ((ee.Image(22.283))
                        .multiply((ee.Image(2.282))
                        .pow((ee.Image(-1.724))
                        .multiply((image.select('B3'))
                        .divide(image.select('B5'))))));
          return(cdom.rename('s2_cdom').set('system:time_start', image.get('system:time_start'))
                      .set('CLOUDY_PIXEL_PERCENTAGE', image.get('CLOUDY_PIXEL_PERCENTAGE')));
    };
 
    // Clip the images in each sensor collection to the areaInput
    var L8_clipped = L8_filtColl.map(function(image){return image.clip(areaInput)});
    var S2L1_clipped = S2L1_filtColl.map(function(image){return image.clip(areaInput)});
    var cdr_clipped = cdr_filtColl.map(function(image){return image.clip(areaInput)});
    
    // Map the water quality algorithms onto their respective sensor image collections
    var L8_turb = L8_clipped.map(l8_turbidity_alg);
    var S2L1_turb = S2L1_clipped.map(s2_turbidity_alg);
    var S2L1_NDCI = S2L1_clipped.map(ndci_algorithm);
    var S2L1_chla = S2L1_clipped.map(mishra_algorithm);
    var S2L1_cdom = S2L1_clipped.map(cdom_algorithm);
          //Return image collections
    return [ee.ImageCollection(L8_turb), 
            ee.ImageCollection(S2L1_turb),
            ee.ImageCollection(S2L1_NDCI),
            ee.ImageCollection(S2L1_chla),
            ee.ImageCollection(S2L1_cdom),
            ee.ImageCollection(modis_filtColl),
            ee.ImageCollection(cdr_clipped),
            ee.ImageCollection(S2L1_clipped)];
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////USER INTERFACE//////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//// style templates ////
var reminderTxtStyle = {fontSize: '12px', color: 'gray', margin: '0 0 0 10px'};
var borderStyle = '3px double steelblue';
var optionsTitleStyle = {fontSize: '18px', fontWeight: 'bold', textAlign: 'center', color: 'steelblue'};
var warningLabelStyle = {color: "#EB7B59", fontSize: '14px'};

////------------------------------panel for choosing language (AllPanels index 0)------------------------------------------ ////
////a dictionary containing lists with English and Spanish versions of the labels ////
var AllLabels = { 
  title: ['Optical Reef and Coastal Area Assessment of Hawaii (ORCAAH) Tool', 'Herramienta de Evaluaci n  ptica de Arrecifes y Zonas Costeras (ORCAA)'],
  intro: ['This dashboard can be used to monitor the spatial and temporal variability of coastal water quality parameters in proximity to the Hawaii Reef Systems.', 
          'Este tablero puede ser usado para monitorear la variabilidad espacial y temporal de los par metros de calidad del agua costera en las proximidades de los Sistemas de Arrecifes de Hawaii.'],
  paramTitle: ['Parameters:', 'Par metros:'],
  startDayLabel: ['Start Date:','Fecha de Inicio:'],
  endDayLabel: ['End Date:', "Fecha de Final: "],
  yearWarningMsg: [
    "Note: including the current year in analysis will only work if it is currently September or later.",
    "Nota: incluir el a o en curso en el an lisis solo funcionar  si es actualmente septiembre o posterior."
  ],
  assetInputPlaceholder: ["user/[username]/[asset name]", "user/[nombre de usario]/[nombre de Asset]"],
  assetInstr: [
    "To use your own area of analysis, click the 'Assets' tab, then 'New' to upload a shapefile.  Once it's uploaded, click the asset, copy the table ID, and paste above.",
    "Para usar su propio  rea de an lisis, haga clic en la pesta a 'Assets' y luego en 'New' para cargar un shapefile. Despu s de que se ha cargado, haga clic en el activo, copie el n mero de identificaci n de la tabla, y p guelo encima."],
  mapDisplayTitle: ['Display Images on the Map', 'Mostre im genes en el mapa'],
  runbuttonLabel: ['Add Images to the Map', 'A ada imagenes al mapa'],
  resetbuttonLabel: ['Reset Map', 'Restablecer mapa'],
  exportTitle: ['Export to Google Drive', 'Exporte a Google Drive'],
  exportInstr1: [
    'Select an image type to export. Exports options for the current image displayed on the map for the selected area will be generated.',
    'Seleccione un tipo de imagen para exportar. Exporta opciones de exportaci n para la imagen actual mostrada en el mapa para el  rea seleccionada.'
    ],
  exportselectPlaceholder: ['Select an analysis type', 'Seleccione un tipo de an lisis'],
  exporterrormsg: ['An image type to export must be selected first.', 'Primero se debe seleccionar un tipo de im gen para exportar.'],
  ICimageExportButton: ['Export Images (GeoTIFF)', 'Exporte Im genes (GeoTIFF)'], 
  ICvideoExportButton: ['Export Image Collection as a video', "Exporte colecci n de im genes como video"],
  exportInstr2: [
    "Click the 'Tasks' tab in the upper right panel of this screen, and then click 'Run' to export the image. Delete any spaces in the 'Task Name' before exporting the image.",
    "Haga clic en la pesta a 'Tasks' en el panel superior derecho de esta pantalla y luego haga clic en 'Run' para exportar la imagen. Elimine los espacios en el 'Tasks Name' antes de exportar la imagen."],
  PITitle: ['Time Series Chart Generator', 'Generador de Gr ficos de Series de Tiempo'],
  PIInstr:[
    "Select an analysis type, then click 'Generate Time Series Charts' to see how values for that geometry have changed over the selected time period.",
    "Seleccione un tipo de an lisis y, a continuaci n, haga clic en 'Generar gr ficos de series temporales' para ver c mo han cambiado los valores de esa geometr a en el intervalo de a os seleccionado."
    ],
  PIselectLabel: ['Analysis Type:', 'Tipo de an lisis:'],
  pointlayername: ["Geometry Analyzed by Change Inspector", "Geometr a analizada por el inspector de cambios"],
  mapinfopanelTitle: ["Just Added:", "Recien a adido:"]
} ;

////___ Function that returns 0 if English is chosen, and 1 if Spanish is chosen ___////
var determinelanguage = function(){ 
  var x;
  if (languageselection.getValue()=='English')
  {x = 0}
  else if (languageselection.getValue()=='Espa ol')
  {x = 1}
  return x;
};

//Language list options
var languagelist = ['English', 'Espa ol'];

//// Selection widget ////
var languageselection = 
  ui.Select({
      items: languagelist,
      value: 'English',  //<-- Changing this value will set the default language that everything will appear in 
      onChange: function(){ //function that rewrites label and widget label values 456
        chosenlanguage = determinelanguage(); //redefine chosenlanguage variable
        ////setting value of IntroPanel widgets:
          IntroPanel.widgets().get(0).setValue(AllLabels.title[chosenlanguage]); //IntroPanel title
          IntroPanel.widgets().get(1).setValue(AllLabels.intro[chosenlanguage]); //IntroPanel instructions
        ////setting value of ParameterPanel widgets:
          ParametersPanel.widgets().get(0).setValue(AllLabels.paramTitle[chosenlanguage]); //ParametersPanel title
          DateSelectionPanel.widgets().get(0).setValue(AllLabels.startDayLabel[chosenlanguage]); //label for setting start year
          DateSelectionPanel.widgets().get(2).setValue(AllLabels.endDayLabel[chosenlanguage]); //label for setting end year
          // yearWarningMsg.setValue(AllLabels.yearWarningMsg[chosenlanguage]); //warning message that comes up when selecting the current year
          assetInputtxt.setPlaceholder(AllLabels.assetInputPlaceholder[chosenlanguage]); //placeholder for asset input textbox 
          assetInputPanel.widgets().get(1).setValue(AllLabels.assetInstr[chosenlanguage]); //instructions that come up when using your own asset as area of analysis
        ////setting value of MapDisplayPanel widgets:
          MapDisplayPanel.widgets().get(0).setValue(AllLabels.mapDisplayTitle[chosenlanguage]); //MapDisplayPanel title
          runbutton.setLabel(AllLabels.runbuttonLabel[chosenlanguage]); //'add images to map' button label
          resetbutton.setLabel(AllLabels.resetbuttonLabel[chosenlanguage]); //'reset map' button label
        ////setting value of ExportPanelWidgets:
          ExportPanel.widgets().get(0).setValue(AllLabels.exportTitle[chosenlanguage]);// title
          ExportPanel.widgets().get(1).setValue(AllLabels.exportInstr1[chosenlanguage]);// instr1
          exportselect.setPlaceholder(AllLabels.exportselectPlaceholder[chosenlanguage]); //placeholder for the selection menu
          ICimageExport.setLabel(AllLabels.ICimageExportButton[chosenlanguage]);// export images button label
          exportInstr2.setValue(AllLabels.exportInstr2[chosenlanguage]);// instr2
        ////setting valueof PIPanel widgets:
          PIPanel.widgets().get(0).setValue(AllLabels.PITitle[chosenlanguage]);// title
          PIPanel.widgets().get(1).setValue(AllLabels.PIInstr[chosenlanguage]);// instr
      }
});

var chosenlanguage = determinelanguage(); //runs function and sets value of the global (default) chosenlanguage variable

///////////////////////////////////////////////
//// Panel with selection widget and label //// 
var LanguageSelectionPanel = ui.Panel([
 ui.Label('Language / Idioma', {fontWeight: 'bold'}),
 languageselection
    ],ui.Panel.Layout.flow('horizontal'));

////------------------------------------------Panel for intro (AllPanels index 1)------------------------------------------------ ////
var IntroPanel = ui.Panel([
    ui.Label({
      value: AllLabels.title[chosenlanguage], //this will be a variable that changes based on language selection
      style: {fontWeight: 'bold', fontSize: '24px', margin: '10px 5px'}
    }),
    ui.Label({
      value: AllLabels.intro[chosenlanguage]
    }),
]);


////-----------------------------------Panel for setting analysis parameters (AllPanels index 2)------------------------------ ////
// Date Selection Panel =========================================================
// Define textboxes for user to input desired date range
var start_text = ui.Textbox({
      value: ('2017-01-01'), // arbitrary date 
      style: {margin:'5px 15px'}
});

var end_text = ui.Textbox({
        value: ('2019-11-01'), // arbitrary date 
        style: {margin:'5px 15px'}
});

// Final panel that holds the headings and textboxes to input date range for images
var DateSelectionPanel = ui.Panel({
  widgets: [
    /*0*/ ui.Label({value: AllLabels.startDayLabel[chosenlanguage], style: {fontWeight: "bold"} }),
    /*1*/ start_text,
    /*2*/ ui.Label({value: AllLabels.endDayLabel[chosenlanguage], style: {fontWeight: "bold"} }),
    /*3*/ end_text,
    ],
});


////////////////////////////////////////
//////////// Area Selection ////////////
////////////////////////////////////////
//// Setting the area of analysis -- to see what feature each variable corresponds to, go back to the beginning of the script ////
// Selection panel for Hawaii
var hawaiiROI_select = ui.Select({
        items: all_roi.slice(0,27), 
        value: "Hilo Bay Small",
        style: {margin: '5px 15px', width: '125px'},
        onChange: roi_selection
});

// Panel for to entering your own asset //
// Textbox to enter path to your asset
var assetInputtxt = ui.Textbox({
  placeholder: 'users/[username]/[asset name]',
  style: {width: '320px'}
});

// Panel that holds textbox and instructions for its use
var assetInputPanel = ui.Panel({
  widgets: [
    /*0*/ assetInputtxt,
    /*1*/ ui.Label(["To use your own area of analysis, click the 'Assets' tab on the top left corner. Then under the 'New' button select 'table upload' to upload a shapefile. Once it's uploaded, click the asset, copy the table ID, and paste above."])
    ]
});

// Panel for drawing your own asset //
var geoInputPanel = ui.Panel({
  widgets: [
    /*0*/ ui.Label(["To draw a geometry, hover on the 'Geometry Imports' tab (upper left, center screen) and click '+new Layer' at the bottom of the panel. Use the 'Draw a Rectangle' tool to make one polygon and keep it named 'geometry'. Re-run the tool in Google Earth Engine and then run analysis on your added geometry. Disregard these instructions if you have already completed the former steps."])
    ]
});


// Panel for selecting a general area that cause the more specific area panels to pop up (Hawaii, Enter your own asset, Draw your own asset) //
var areaselect = ui.Select({
        items: ['Hawaii', 'Upload your own asset', 'Draw your own asset'],
        style: {margin: '5px 15px', width: '125px'},
        onChange: function(){
          if (areaselect.getValue() == 'Upload your own asset') {
            AreaSelectionPanel.widgets().set(2, assetInputPanel);
          } else if (areaselect.getValue() != 'Upload your own asset') {
            AreaSelectionPanel.widgets().remove(assetInputPanel);
          } if (areaselect.getValue() == 'Draw your own asset') {
            AreaSelectionPanel.widgets().set(2, geoInputPanel);
          } else if (areaselect.getValue() != 'Draw your own asset') {
            AreaSelectionPanel.widgets().remove(geoInputPanel);
          } if (areaselect.getValue() == 'Hawaii') {               
            AreaSelectionPanel.widgets().add(hawaiiROI_select);
          } else if (areaselect.getValue() != 'Hawaii') {
            AreaSelectionPanel.widgets().remove(hawaiiROI_select);
          }
        }
});

areaselect.setPlaceholder('Select an Area');

var AreaSelectionPanel = ui.Panel({
  widgets: [
    /*0*/ areaselect,
    //*1*/ assetInputPanel, // added to the panel if 'Upload your own asset' is selected
    //*2*/ geoInputPanel, // added to the panel is 'Draw your own asset' is selected
    ]
});

////////////////////////////////////////
/////// FINAL PARAMETERS PANEL /////////
////////////////////////////////////////
var ParametersPanel = ui.Panel({
  widgets: [
    /*0*/ ui.Label({
      value: AllLabels.paramTitle[chosenlanguage],
      style: {fontSize: '18px', fontWeight: 'bold', textAlign: 'center'}, 
    }),
    /*1*/ DateSelectionPanel,
    /*2*/ AreaSelectionPanel,
    ]
  });

////--------------------------panel for displaying layers on map (index 3)---------------------------------------------------////
////Panel with checkboxes and legends (which are hidden on default) and buttons to add and remove layers to the map.
////For the land classification, NDVI, and NDWI checkboxes, checking the box will result in the legends being added to the panel.
////Unchecking will result in the panel being removed, though it's a little buggy when removing and then adding back.

///////////////////////////////////////////////////
///// Checkboxes for selecting layers to add /////
/////////////////////////////////////////////////
var truecolorCheckbox = ui.Checkbox({
  label: 'True Color / Color Verdadero',
  value: true // sets the checkbox as checked by default
});

var sstCheckbox = ui.Checkbox({
  label: 'Sea Surface Temperature / Temperatura Superficial del Mar',
  onChange: function(){
    if (sstCheckbox.getValue()===true){
      legendsPanel.widgets().set(0, sstLegend);}
    else{legendsPanel.widgets().remove(sstLegend)}
  },
  //value: true ////sets the checkbox as checked by default
});

var turbCheckbox = ui.Checkbox({
  label: 'Turbidity / Turbidez',
  onChange: function(){
    if (turbCheckbox.getValue()===true){
      legendsPanel.widgets().set(1, turbLegend);}
    else{legendsPanel.widgets().remove(turbLegend)}
  },
  //value: true ////sets the checkbox as checked by default
});

var ndciCheckbox = ui.Checkbox({
  label: 'Normalized Difference Chlorophyll Index / Diferencia normalizada  ndice de clorofila',
  onChange: function() {
    if (ndciCheckbox.getValue()===true){
      legendsPanel.widgets().set(2, ndciLegend);}
      else{legendsPanel.widgets().remove(ndciLegend)}
  }
});

var chlaCheckbox = ui.Checkbox({
  label: 'Chlorophyll-a / Clorofila-A',
  onChange: function(){
    if (chlaCheckbox.getValue()===true){
      legendsPanel.widgets().set(3, chlaLegend);}
    else{legendsPanel.widgets().remove(chlaLegend)}
  },
  //value: true ////sets the checkbox as checked by default
});

var cdomCheckbox = ui.Checkbox({
  label: 'Colored Dissolved Organic Matter / Materia org nica disuelta coloreada',
  onChange: function(){
    if (cdomCheckbox.getValue()===true){
      legendsPanel.widgets().set(4, cdomLegend);}
    else{legendsPanel.widgets().remove(cdomLegend)}
  },
  //value: true ////sets the checkbox as checked by default
});

// Panel to hold all the headings and all checkboxes
var checkboxesPanel = ui.Panel({
  widgets: [
    /*0*/ truecolorCheckbox,
    /*1*/ sstCheckbox,
    /*2*/ turbCheckbox,
    /*3*/ ndciCheckbox,
    /*4*/ chlaCheckbox,
    /*5*/ cdomCheckbox,
    ]
});

/////////////////////////////////////////
//////// Legend Panels /////////////////
////////////////////////////////////////
////___ defines function that makes a color bar given a palette (used to make NDVI and NDWI color bars). Used in the thumbnail params ___/////
function makeColorBar(palette) {
  return {
    bbox: [0, 0, 1, 0.1],
    dimensions: '100x25',
    format: 'png',
    min: 0,
    max: 1,
    palette: palette
  };
}

//////// SST Legend ////////
//// Create the color bar for the legend ////
var sstColorBar = ui.Thumbnail({
  image: ee.Image.pixelLonLat().select(0),
  params: makeColorBar(sst_viz.palette),
  style: {stretch: 'horizontal', margin: '0px 8px', maxHeight: '25px'},
});

//// Create a panel with two numbers for the legend. ////
var sstLegendLabels = ui.Panel({
  widgets: [
    ui.Label('25', {margin: '4px 8px'}),
    ui.Label('35', {margin: '4px 230px'})
  ],
  layout: ui.Panel.Layout.flow('horizontal')
});

////the final panel for showing the SST legend ////
var sstLegend = ui.Panel({
  widgets: [
    ui.Label({
      value: 'SST (C)',
      style: {
        fontWeight: 'bold',
        fontSize: '14px',
        margin: '0 0 4px 0',
        padding: '0'
      }
    }),
    sstColorBar,
    sstLegendLabels],
  style: {
    padding: '8px 15px'
  }
});

///////// Turbidity  Legend /////////
//// Create the color bar for the legend ////
var turbColorBar = ui.Thumbnail({
  image: ee.Image.pixelLonLat().select(0),
  params: makeColorBar(turb_viz.palette),
  style: {stretch: 'horizontal', margin: '0px 8px', maxHeight: '25px'},
});

//// Create a panel with two numbers for the legend. ////
var turbLegendLabels = ui.Panel({
  widgets: [
    ui.Label('0', {margin: '4px 8px'}),
    ui.Label('5', {margin: '4px 230px'})
  ],
  layout: ui.Panel.Layout.flow('horizontal')
});


////the final panel for showing the turbidity legend ////
var turbLegend = ui.Panel({
  widgets: [
    ui.Label({
      value: 'Turbidity (FNU)',
      style: {
        fontWeight: 'bold',
        fontSize: '14px',
        margin: '0 0 4px 0',
        padding: '0'
      }
    }),
    turbColorBar,
    turbLegendLabels],
  style: {
    padding: '8px 15px'
  }
});

//////////////// NDCI Legend ///////////////////
//Create color bar for legend///
var ndciColorBar = ui.Thumbnail({
  image: ee.Image.pixelLonLat().select(0),
  params: makeColorBar(ndci_viz.palette),
  style: {stretch: 'horizontal', margin: '0px 8px', maxHeight: '25px'},
});

//Create a panel with two numbers for the legend
var ndciLegendLabels = ui.Panel({
  widgets: [
    ui.Label('-1', {margin: '4px 8px'}),
    ui.Label('+1', {margin: '4px 230px'})
    ],
    layout: ui.Panel.Layout.flow('horizontal')
});

//Final panel for showing NDCI legend ////
var ndciLegend = ui.Panel({
  widgets: [
    ui.Label({
      value: 'NDCI',
      style: {
        fontWeight: 'bold',
        fontSize: '14px',
        margin: '0 0 4px 0',
        padding: '0'
      }
    }),
    ndciColorBar,
    ndciLegendLabels],
  style: {
    padding: '8px 15px'
  }
});

///////// Chlorophyll-a  Legend /////////
//// Create the color bar for the legend ////
var chlaColorBar = ui.Thumbnail({
  image: ee.Image.pixelLonLat().select(0),
  params: makeColorBar(mishra_viz.palette),
  style: {stretch: 'horizontal', margin: '0px 8px', maxHeight: '25px'},
});

//// Create a panel with two numbers for the legend. ////
var chlaLegendLabels = ui.Panel({
  widgets: [
    ui.Label('0', {margin: '4px 8px'}),
    ui.Label('5', {margin: '4px 230px'})
  ],
  layout: ui.Panel.Layout.flow('horizontal')
});


////the final panel for showing the Chl-a legend ////
var chlaLegend = ui.Panel({
  widgets: [
    ui.Label({
      value: 'Chl (mg/m^3)',
      style: {
        fontWeight: 'bold',
        fontSize: '14px',
        margin: '0 0 4px 0',
        padding: '0'
      }
    }),
    chlaColorBar,
    chlaLegendLabels],
  style: {
    padding: '8px 15px'
  }
});

///////// CDOM  Legend /////////
//// Create the color bar for the legend ////
var cdomColorBar = ui.Thumbnail({
  image: ee.Image.pixelLonLat().select(0),
  params: makeColorBar(cdom_viz.palette),
  style: {stretch: 'horizontal', margin: '0px 8px', maxHeight: '25px'},
});

//// Create a panel with two numbers for the legend. ////
var cdomLegendLabels = ui.Panel({
  widgets: [
    ui.Label('0', {margin: '4px 8px'}),
    ui.Label('6', {margin: '4px 240px'})
  ],
  layout: ui.Panel.Layout.flow('horizontal')
});


////the final panel for showing the NDVI legend ////
var cdomLegend = ui.Panel({
  widgets: [
    ui.Label({
      value: 'CDOM (m^-1)',
      style: {
        fontWeight: 'bold',
        fontSize: '14px',
        margin: '0 0 4px 0',
        padding: '0'
      }
    }),
    cdomColorBar,
    cdomLegendLabels],
  style: {
    padding: '8px 15px'
  }
});

////final panel holding all the legends //// 
//it is an empty by panel by default, so the legends will only appear when the corresponding checkbox is checked
var legendsPanel = ui.Panel({
  widgets:[
  /*0*/ ui.Panel(), //sstLegend,
  /*1*/ ui.Panel(), //turbLegend,
  /*2*/ ui.Panel(), //ndciLegend
  /*3*/ ui.Panel(), //chlaLegend,
  /*4*/ ui.Panel(), //cdomLegend
  ]
});

///////////////////////////////////////////////////
//////////// Panel with the buttons //////////////
//////////////////////////////////////////////////
////___ first, define function that adds layers based on the checkboxes that are selected ___////
//images appear by cloudiness//
function DisplayTrueColor(collection){ 
    var S2_image = (collection.sort('CLOUDY_PIXEL_PERCENTAGE').first()); 
      if (truecolorCheckbox.getValue()===true)
        {Map.addLayer(S2_image, s2_viz, getName(areaselect.getValue()) + ' Sentinel-2 True Color / Color Verdadero')}
    }
    
function DisplayTurb(collection){ 
    var S2_image = (collection.sort('CLOUDY_PIXEL_PERCENTAGE').first());
      if (turbCheckbox.getValue()===true)
        {Map.addLayer(S2_image.select('s2_turb'), turb_viz, getName(areaselect.getValue()) + ' Sentinel-2 Turbidity / Turbidez')}
    }
    
function DisplayNDCI(collection){
    var S2_image = (collection.sort('CLOUDY_PIXEL_PERCENTAGE').first()); 
      if (ndciCheckbox.getValue()===true)
        {Map.addLayer(S2_image, ndci_viz, getName(areaselect.getValue()) + ' NDCI')}
    }  
    
function DisplayChla(collection){
    var S2_image = (collection.sort('CLOUDY_PIXEL_PERCENTAGE').first()); 
      if (chlaCheckbox.getValue()===true)
        {Map.addLayer(S2_image, mishra_viz, getName(areaselect.getValue()) + ' Chlorophyll-a / Clorofila-A')}
    }

function DisplayCDOM(collection){
    var S2_image = (collection.sort('CLOUDY_PIXEL_PERCENTAGE').first()); 
      if (cdomCheckbox.getValue()===true)
        {Map.addLayer(S2_image, cdom_viz, getName(areaselect.getValue()) + ' CDOM')}
    }    

function DisplaySST(collection){
    var modis_image = collection.first(); 
      if (sstCheckbox.getValue()===true)
        {Map.addLayer(modis_image, sst_viz, getName(areaselect.getValue()) + ' MODIS SST')}
    }

////the actual button: ////
var runbutton = ui.Button({
   label: AllLabels.runbuttonLabel[chosenlanguage],
   style: {width: '300px', color: 'steelblue', padding: '15px 5px 0px 5px'}, //I can't seem to get the button to be bigger!
   onClick: function(){
     var areaInput = setAreaOfInterest(areaselect.getValue());
     Map.centerObject(areaInput);
     var FinalCollections = createAnalysisIC(start_text.getValue(), end_text.getValue(), areaselect.getValue());
     // Run the DisplayLayers() function with FinalCollections as the input ////
     DisplayTrueColor(FinalCollections[7]) // Sentinel-2 Level 1C Collection
     DisplayTurb(FinalCollections[1]); // Landsat 8 and Sentinel-2 Turb Collections
     DisplayNDCI(FinalCollections[2]); //Sentinel-2 Level 1C NDCI Collection
     DisplayChla(FinalCollections[3]); // Sentinel-2 Level 1C Chla Collection
     DisplayCDOM(FinalCollections[4]); // Sentinel-2 Level 1C CDOM Collection
     DisplaySST(FinalCollections[5]); // MODIS Collection
  //   ////set width of the mapinfopanel and add text to the box ////
  //   mapinfopanel.style().set({width: '200px'});
  //   mapinfopanel.widgets().set(0,ui.Label({value: AllLabels.mapinfopanelTitle[chosenlanguage], style: {margin: "0px", fontWeight: "bold"}}));
  //   mapinfopanel.widgets().set(1,ui.Label({value: startyearselect.getValue() + " " + endyearselect.getValue() + ".", style: {margin: "0px"}}));
  //   mapinfopanel.widgets().set(2,ui.Label({value: areaselect.getValue() + ".", style: {margin: "0px"}}));
  }
  });

//Removes map layers to reset map
var resetbutton = ui.Button({
    label: AllLabels.resetbuttonLabel[chosenlanguage], 
    style: {width: '300px', color: '#EB7B59', padding: '5px 5px 15px 5px',},
    onClick: function reset(){
      ////remove all layers in the map, add in the Hawaii MPAs layers again ////
      Map.layers().reset();
      Map.setOptions("Hybrid");
      Map.addLayer(MPAs,{color: 'fecb00'}, 'Hawaii MPAS', false);
    }
  });

////final panel that holds the buttons
var buttonsPanel = ui.Panel({
  widgets: [
    runbutton,
    resetbutton,
    ]
});


/////////////////////////////////////////////////
////FINAL PANEL FOR DISPLAYING LAYERS ON MAP ////
////////////////////////////////////////////////
var MapDisplayPanel = ui.Panel({
  widgets:[
    /*0*/ ui.Label({
      value: AllLabels.mapDisplayTitle[chosenlanguage],
      style: optionsTitleStyle, 
    }),
    /*1*/ checkboxesPanel,
    /*2*/ legendsPanel, ////even though it's empty by default, it must be added so the legends will show up
    /*3*/ buttonsPanel,
    ],
  style: {margin: '10px 0px 0px 0px', border: borderStyle},
});


////////-------------------------------------------------panel for exporting data (AllPanels index 4)------------------------------------------////
/////////////////////
///// functions /////
/////////////////////

////___ function for exporting images in an image collection ___////
function exportImages(collection_I, band_I, filename_I){ 
  var exportImage;
  if (band_I == 'sst'){
    exportImage = collection_I.first().select('sst');
  } else {
    var leastCloudyImg = collection_I.sort('CLOUDY_PIXEL_PERCENTAGE').first();
    exportImage = leastCloudyImg.select(band_I)
  }
  var areaname = ee.String(getName(areaselect.getValue())).replace(' ', '', 'g').replace('/', '').getInfo(); 
  var areaGeo = setAreaOfInterest(areaselect.getValue());
  Export.image.toDrive({
    image: exportImage,
    description: areaname + "_" + filename_I, //generates the task/file name
    scale: 30, //meters per pixel
    maxPixels: 2e10, 
    region: areaGeo //sets the bounds of the exported image to be the area of interest
  });
}

///////////////////
///// widgets /////
///////////////////

//// menu to select the image type to export ////
var exportselect = ui.Select({
  items: ['True Color / Color Verdadero', 'SST', 'Turbidity / Turbidez', 'NDCI', 'Chlorophyll-a / Clorofila-A', 'CDOM' ],
  style: {margin: '0px 0px 10px 10px' },
  placeholder: AllLabels.exportselectPlaceholder[chosenlanguage],
  onChange: function(){ExportPanel.widgets().remove(exporterrormsg)},
});

//// error message that appears when clicking the export button without having selected an image type to export ////
var exporterrormsg = ui.Label({value: AllLabels.exporterrormsg[chosenlanguage], style: warningLabelStyle});

////label that appears and provides further instructions once user has clicked export button ////
var exportInstr2 = ui.Label(AllLabels.exportInstr2[chosenlanguage]); 

//// button for exporting images ////
var ICimageExport = ui.Button({
  label: AllLabels.ICimageExportButton[chosenlanguage],
  style: {width: '300px', color: 'steelblue', padding: '15px 5px 0px 5px',},
  onClick: function(){
    if (exportselect.getValue() === null){
      ExportPanel.widgets().set(3, exporterrormsg);
      }
    else{
      var ExportCollections = createAnalysisIC(start_text.getValue(), end_text.getValue(), areaselect.getValue());
      if (exportselect.getValue() == 'True Color / Color Verdadero'){exportImages(ExportCollections[7], ['B4', 'B3', 'B2'], "TrueColor")}
      if (exportselect.getValue() == 'SST'){exportImages(ExportCollections[5], 'sst', "SST")}
      if (exportselect.getValue() == 'Turbidity / Turbidez'){exportImages(ExportCollections[1], 's2_turb', "S2Turb")}
      if (exportselect.getValue() == 'NDCI'){exportImages(ExportCollections[2], 'NDCI', "NDCI")} 
      if (exportselect.getValue() == 'Chlorophyll-a / Clorofila-A'){exportImages(ExportCollections[3], 's2_chl', "Chla")}
      if (exportselect.getValue() == 'CDOM'){exportImages(ExportCollections[4], 's2_cdom', "CDOM")}
      ExportPanel.widgets().set(5, exportInstr2);
    }
  }, 
});

///////////////////////////////////////////////////////
///// FINAL PANEL FOR EXPORTING IMAGES AND VIDEOS /////
//////////////////////////////////////////////////////
var ExportPanel = ui.Panel({
  widgets: [
    /*0*/ ui.Label({
      value: AllLabels.exportTitle[chosenlanguage],
      style: optionsTitleStyle, 
    }),
    /*1*/ ui.Label(AllLabels.exportInstr1[chosenlanguage]),
    /*2*/ exportselect,
    /*3*/ ui.Panel(), //placeholder for error message
    /*4*/ ICimageExport,
    /*5*/ ui.Panel(), //placeholder for further instructions
    ],
  layout: ui.Panel.Layout.flow('vertical', 'true'),
  style: {margin: '10px 0px 0px 0px', border: borderStyle}
});


////////-------------------------------------panel for point change inspector (AllPanels index 5)-------------------------------////

////checkbox to turn the point change inspector on and off ////
var PI_OnOff = ui.Button({
  label: "Generate Time Series Chart",
  style: {width: '300px', color: 'steelblue', padding: '5px 5px 15px 5px',},
  onClick: function(){ 
        //// Create the image collection and then a chart of the spectral index selected by user. ////
        var PICollection = createAnalysisIC(start_text.getValue(), end_text.getValue(), areaselect.getValue());
        var chartband;
        var analysis_collection;
        var region = setAreaOfInterest(areaselect.getValue());
        if (PIselect.getValue()=='Turbidity / Turbidez'){chartband = 's2_turb'; analysis_collection = turb_totalMask(PICollection[1]), 's2_turb'}
          else if (PIselect.getValue()=='NDCI'){chartband = 'NDCI'; analysis_collection = ndci_totalMask(PICollection[2]), 'NDCI'}
          else if (PIselect.getValue()=='Chlorophyll-a / Clorofila-A'){chartband = 's2_chl'; analysis_collection = chl_totalMask(PICollection[3]), 's2_chl'}
           else if (PIselect.getValue()=='CDOM'){chartband = 's2_cdom'; analysis_collection = cdom_totalMask(PICollection[4]), 's2_cdom'}
          else if (PIselect.getValue()=='SST'){chartband = 'sst'; analysis_collection = PICollection[5], 'sst'}
          else if(PIselect.getValue()==='Precipitation'){chartband = 'precipitation'; analysis_collection = PICollection[6], 'precipitation'}

        var indexChart = ui.Chart.image.seriesByRegion({
          imageCollection: analysis_collection, 
          regions: region,
          reducer: ee.Reducer.mean(),
          scale:100,
          band: chartband,
          seriesProperty: PIselect.getValue()
        });

        ////set the appearance of the chart ////
        indexChart.setOptions({
    title: PIselect.getValue() + " in " + getName(areaselect.getValue()) + " Time Series Chart",
    lineWidth: 2,
    pointSize: 5,
    colors: ['#26A69A'],
    interpolateNulls: true,
    hAxis: {
        title: 'Date'
    },
    vAxis: {
        title: PIselect.getValue()
    }})
        ////chart set to PIPanel at index position 6 ////
        PIPanel.widgets().set(5, indexChart);
      ;
      
    }});

////menu for selecting what the chart should show ////
var PIselect = ui.Select({
  items: ['Turbidity / Turbidez', 'NDCI', 'Chlorophyll-a / Clorofila-A', 'CDOM', 'SST', 'Precipitation'],
  value: 'Turbidity / Turbidez' 
});

////////////////////////////////////////////
//// FINAL POINT CHANGE INSPECTOR PANEL ////
////////////////////////////////////////////
var PIPanel = ui.Panel({
  widgets: [
  /*0*/ui.Label({
    value: AllLabels.PITitle[chosenlanguage],
    style: optionsTitleStyle,
  }),

  /*1*/ui.Label(AllLabels.PIInstr[chosenlanguage]),
  PIselect,
  /*2*/PI_OnOff,
  /*3*/ ui.Panel(),//indexChart added here
  /*4*/ ui.Panel()
  ],
  style: {margin: '10px 0px 0px 0px', border: borderStyle}
});

//-------------------------------------------------------------------------------------------------------------------------------//
//----------------------------------------------adding all the panels together into one panel------------------------------------//  
//-------------------------------------------------------------------------------------------------------------------------------//
var AllPanels = ui.Panel({
  widgets: [
    /*0*/ LanguageSelectionPanel,
    /*1*/ IntroPanel,
    /*2*/ ParametersPanel, 
    /*3*/ MapDisplayPanel, 
    /*4*/ ExportPanel, 
    /*5*/ PIPanel, 
    ],
  style: {width: '350px', padding: '8px'}
});

//insert this panel into the root panel (sidebar)
ui.root.insert(0,AllPanels);
